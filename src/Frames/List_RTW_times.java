/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frames;

import imp.process;
import imp.ready_queue;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mt
 */
public class List_RTW_times extends javax.swing.JFrame {

    /**
     * Creates new form List_RTW_times
     */
    public List_RTW_times() {
        initComponents();          
        scheduler();
       addRowsTojTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField_response_avg = new javax.swing.JTextField();
        jTextField_turnaround_avg = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextField_waiting_avg = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "proc_name", "response.t", "turnaround.t", "waiting.t"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Response.avg");

        jLabel2.setText("Turnaround.avg");

        jTextField_response_avg.setEditable(false);

        jTextField_turnaround_avg.setEditable(false);

        jLabel4.setText("Waiting.avg");

        jTextField_waiting_avg.setEditable(false);

        jButton2.setText("Create A gantt chart");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 701, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(180, 180, 180)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(207, 207, 207)
                                .addComponent(jLabel4)))
                        .addGap(91, 91, 91)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField_response_avg, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                            .addComponent(jTextField_turnaround_avg)
                            .addComponent(jTextField_waiting_avg))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(295, 295, 295)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField_response_avg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField_turnaround_avg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jTextField_waiting_avg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         gantt_avg gantt=new  gantt_avg();
         gantt.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed
   public void addRowsTojTable() {
    try{
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        Object rowData[] = new Object[4];
         for (process x : ready_queue.finished_prc) {
             rowData[0] = x.get_pro_name();
            rowData[1] = x.calc_response_time();
            rowData[2] = x.calc_turnaround_time(); 
             rowData[3] = x.calc_waiting_time(); 
             model.addRow(rowData);
         }
         String x=Double.toString(calc_response_avg());
         jTextField_response_avg.setText(x);
         x=Double.toString(calc_turnaround_avg());
          jTextField_turnaround_avg.setText(x);
          x=Double.toString(calc_waiting_avg());
           jTextField_waiting_avg.setText(x);  
    }catch(Exception e){
        JOptionPane.showMessageDialog(null,e+" in list rtw");
    }
    }
   private void scheduler(){
      try{
       ready_queue rq=new ready_queue();
       process x;
       rq.sort();
       x=rq.dequeue();
        process[] arr=ready_queue.processes.toArray(new process[ready_queue.processes.size()]);
       rq.add_to_ready(x);
       double time=x.get_arrival_time();
       ready_queue.alltimes.add(time);
        int quantum=ready_queue.quantum;
        int c=0;
        int size=arr.length;
       while(c<=size){     
        x=rq.retrieve_from_ready();
        x.addAstartTime(time);
        time+=x.makeAstage(quantum);
        x.addAnendTime(time);
         ready_queue.allnames.add(x.get_pro_name());
          ready_queue.alltimes.add(time);
        for(int i=0;i<arr.length;i++){
            if(arr[i]!=null){
                if(arr[i].if_arrived(time)){        
                    rq.add_to_ready(arr[i]);
                    arr[i]=null;
                 }
            } 
        }
        if(x.get_burst_time()>0){
          rq.add_to_ready(x);
        }
         if(x.get_burst_time()==0){
             ready_queue.finished_prc.add(x);
           c++;
       }
       }
      }catch(Exception e){
       JOptionPane.showMessageDialog(null,e+" in List_RTW_times");
        }
      
   }
   private double calc_response_avg(){
       double avg=0.0;
       for(int i=0;i< ready_queue.finished_prc.size();i++){
        avg+=ready_queue.finished_prc.get(i).get_response_time();
          }
       return (avg/ready_queue.finished_prc.size());
    }
   private double calc_turnaround_avg(){
        double avg=0.0;
       for(int i=0;i< ready_queue.finished_prc.size();i++){
        avg+=ready_queue.finished_prc.get(i).get_turnaround_time();
          }
       return (avg/ready_queue.finished_prc.size());
   }
   private double calc_waiting_avg(){
        double avg=0.0;
       for(int i=0;i< ready_queue.finished_prc.size();i++){
        avg+=ready_queue.finished_prc.get(i).get_waiting_time();
          }
       return (avg/ready_queue.finished_prc.size());
   }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(List_RTW_times.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(List_RTW_times.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(List_RTW_times.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(List_RTW_times.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new List_RTW_times().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField_response_avg;
    private javax.swing.JTextField jTextField_turnaround_avg;
    private javax.swing.JTextField jTextField_waiting_avg;
    // End of variables declaration//GEN-END:variables
}
/*
 ready_queue rq=new ready_queue();
       process x;
       rq.sort();
       x=rq.dequeue();
       double time=0;
        int quantum=ready_queue.quantum;
        process.alltimes.add(time);
       // process.allnames.add(x.get_pro_name());
        //time+=x.makeAstage(quantum);
        ///process.alltimes.add(time);
        rq.add_to_ready(x);
        int c=0;
        int size=ready_queue.processes.size();
        
       while(c<=size){
       for(int i=0;i<ready_queue.processes.size();i++){
           if(ready_queue.processes.get(i).if_arrived(time)){
               rq.add_to_ready(ready_queue.processes.get(i));
               ready_queue.processes.remove(i);
           }
        }      
        x=rq.retrieve_from_ready();
        process.allnames.add(x.get_pro_name());
        time+=x.makeAstage(quantum);
        process.alltimes.add(time);
        JOptionPane.showMessageDialog(null,x.get_pro_name());
         process.allarrivalt.add(x.get_arrival_time());
          if(x.get_burst_time()>0){
           rq.add_to_ready(x);
          }
          if(x.get_burst_time()==0){
           c++;
          }
       }
*/